# -*- coding: utf-8 -*-
"""PROJ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MXf___BGJhT-sgQvi7PoWxr8mSjOqA1E
"""

#install extra-keras-datasets to access the emnist letters dataset
!pip install extra-keras-datasets
from extra_keras_datasets import emnist

#import all modules
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Model
from keras.layers import Input
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.utils.vis_utils import plot_model
import tensorflow as tf
import tensorflow.keras as keras
from tensorflow.keras import layers 
from tensorflow.keras import regularizers

#import dataset of letters directly as train and test data
(image_train, label_train), (image_test, label_test) = emnist.load_data(type='letters')

print(label_train)

#check the shapes of our variables
print(image_train.shape)
print(label_train.shape)
print(image_test.shape)
print(label_test.shape)
print(np.unique(label_test))

#print first 30 images to make sure they're readable
f, axs = plt.subplots(6,5,figsize=(15,15))
for i in range(30):
  plt.subplot(6,5,i+1)
  plt.imshow(image_train[i])

#reshape data for use in keras by adding 1 channel to normalize RGB color scheme
image_test = image_test.reshape(image_test.shape[0],28, 28,1)
image_train = image_train.reshape(image_train.shape[0],28, 28,1)


image_train = image_train.astype('float32')
image_test = image_test.astype('float32')

# Normalize RGB codes 
image_train /= 255
image_test /= 255

#one hot encoding to get category names to numbers
label_train = tf.keras.utils.to_categorical(label_train)
label_test = tf.keras.utils.to_categorical(label_test)

label_train.shape

#create the first neural network - starting with a simple



#create model - VGG 
model = keras.Sequential()
for i in range(2):
	model.add(Conv2D(32, (3, 3), input_shape=(28, 28, 1), padding='same',activation='relu'))
	model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
for i in range(2):
	model.add(Conv2D(64, (3, 3), input_shape=(28, 28, 1), padding='same',activation='relu'))
	model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
for i in range(2):
	model.add(Conv2D(128, (3, 3), input_shape=(28, 28, 1), padding='same',activation='relu'))
	model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(Conv2D(256, (3, 3), input_shape=(28, 28, 1), padding='same',activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(27, activation='softmax'))
model.summary ()
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(image_train, label_train, validation_data=(image_test, label_test), epochs=10, batch_size=200)





